{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Question","question","useState","displayHint","setdisplayHint","text","hints","className","onClick","App","qs","questions","sections","Object","keys","console","log","showAllQuestions","setshowAllQuestions","getQuestionsForDisplay","questionsToAsk","indexes","length","questionsListLength","Math","ceil","i","floor","random","includes","push","forEach","map","section","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"46uBA8DA,IAAMA,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACKC,oBAAS,GADd,mBAC1BC,EAD0B,KACbC,EADa,KAEzBC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,MAMd,OACE,qBAAIC,UAAU,WAAd,UACE,mBAAGA,UAAU,gBAAb,SAA8BF,MAC3BC,GAAS,wBAAQC,UAAU,YAAYC,QAP3B,WACjBJ,GAAgBD,IAMF,SAAoDA,EAAc,8FAAqB,gGAClGA,GAAe,mBAAGI,UAAU,gBAAb,SAA8BD,QAMrCG,EA5Ef,WACE,IAAMC,EAAKC,EACLC,EAAWC,OAAOC,KAAKJ,GAC7BK,QAAQC,IAAIN,GAHC,MAImCR,oBAAS,GAJ5C,mBAINe,EAJM,KAIYC,EAJZ,KAUPC,EAAyB,SAACR,GAQ9B,IAPA,IAAMS,EAAiB,GACjBC,EAAU,GACVC,EAASX,EAAUW,OAInBC,EAAsBC,KAAKC,KAAKH,EAAS,GACxCD,EAAQC,OAASC,GAAqB,CAC3C,IAAMG,EAJCF,KAAKG,MAAMH,KAAKI,SAAWJ,KAAKG,MAAML,IAKxCD,EAAQQ,SAASH,IACpBL,EAAQS,KAAKJ,GAQjB,OAJAL,EAAQU,SAAQ,SAAAL,GACdN,EAAeU,KAAKnB,EAAUe,OAGzBN,GAIT,OACE,sBAAKb,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,kIACA,wBAAQA,UAAU,YAAYC,QA/BZ,WACtBU,GAAqBD,IA8BjB,SAAyDA,EAAmB,qJAA+B,mHAC3G,0BAEF,+BAEIL,EAASoB,KAAI,SAAAC,GAAO,OAClB,sBAAK1B,UAAU,UAAf,UACE,6BAAK0B,IACL,+BACGhB,GAAoBP,EAAGuB,GAASD,KAAI,SAAA/B,GAAQ,OAAI,cAAC,EAAD,CAAUA,SAAUA,QACnEgB,GAAoBE,EAAuBT,EAAGuB,IAAUD,KAAI,SAAA/B,GAAQ,OAAI,cAAC,EAAD,CAAUA,SAAUA,sBCvC/FiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c486f118.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport * as questions from './questions.json';\n\nfunction App() {\n  const qs = questions.default;\n  const sections = Object.keys(qs);\n  console.log(qs);\n  const [showAllQuestions, setshowAllQuestions] = useState(false);\n\n  const toggleQuestions = () => {\n    setshowAllQuestions(!showAllQuestions);\n  }\n\n  const getQuestionsForDisplay = (questions) => {\n    const questionsToAsk = [];\n    const indexes = [];\n    const length = questions.length;\n    const getRandom = () => {\n      return Math.floor(Math.random() * Math.floor(length));\n    };\n    const questionsListLength = Math.ceil(length / 2);\n    while (indexes.length < questionsListLength) {\n      const i = getRandom();\n      if (!indexes.includes(i)) {\n        indexes.push(i);\n      } \n    }\n\n    indexes.forEach(i => {\n      questionsToAsk.push(questions[i]);\n    })\n\n    return questionsToAsk;\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Вопросы по курсу Manual-QA</h1>\n        <button className=\"show-hint\" onClick={toggleQuestions}>{showAllQuestions ? 'Показать рандомные вопросы' : 'Показать все вопросы'}</button>\n        <br />\n      </header>\n      <main>\n        {\n          sections.map(section => (\n            <div className=\"section\">\n              <h3>{section}</h3>\n              <ul>\n                {showAllQuestions && qs[section].map(question => <Question question={question} />)}\n                {!showAllQuestions && getQuestionsForDisplay(qs[section]).map(question => <Question question={question} />)}\n              </ul>\n            </div>\n          ))\n        }\n      </main>\n    </div>\n  );\n}\n\n\nconst Question = ({ question }) => {\n  const [displayHint, setdisplayHint] = useState(false);\n  const { text, hints } = question;\n\n  const toggleHint = () => {\n    setdisplayHint(!displayHint);\n  }\n\n  return (\n    <li className=\"question\">\n      <p className=\"question-text\">{text}</p>\n      {!!hints && <button className=\"show-hint\" onClick={toggleHint}>{displayHint ? 'Спрятать спойлер' : 'Показать спойлер'}</button>}\n      {displayHint && <p className=\"question-hint\">{hints}</p>}\n    </li>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}